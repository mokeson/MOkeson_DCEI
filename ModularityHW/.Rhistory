D<-readRDS(file="./Data/USAAnnualPcpn1950_2008.rds")
Pcpn_08<-readRDS(file="./Data/USAAnnualPcpn1950_2008.rds")
Temp_08<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn_16<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
Pcpn_08<-readRDS(file="./Data/USAAnnualPcpn1950_2008.rds")
Temp_08<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn_16<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
Pcpn_08<-readRDS(file="./Data/USAAnnualPcpn1950_2008.rds")
Temp_08<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn_16<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
#Dependencies: none
#Load required packages
library(knitr)
knitr::opts_chunk$set(cache=TRUE)
#Other general prep
#Fill in
#New variables created: none, packages loaded
#Dependencies: none
#Load required packages
library(knitr)
knitr::opts_chunk$set(cache=F)
#Other general prep
#Fill in
#New variables created: none, packages loaded
#Dependencies: none
#Load required packages
library(knitr)
knitr::opts_chunk$set(cache=T)
#Other general prep
#Fill in
#New variables created: none, packages loaded
Pcpn_08<-readRDS(file="./Data/USAAnnualPcpn1950_2008.rds")
Temp_08<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn_16<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
Temp<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
#Dependencies: none
#Load required packages
library(knitr)
library(data.table)
install.packages("data.table")
#Dependencies: none
#Load required packages
library(knitr)
library(data.table)
knitr::opts_chunk$set(cache=T)
#Other general prep
#Fill in
#New variables created: none, packages loaded
#Import Data
Temp<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
install.packages("maps")
#Load required packages
library(knitr)
library(data.table)
library(maps)
knitr::opts_chunk$set(cache=T)
#Import Data
Temp<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
View(Temp)
View(Temp)
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
View(dt.pcpn)
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize temp and precip
df.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c(state,name,lat,lon)
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize temp and precip
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c(name,lat,lon)
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize temp and precip
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("state","name","lat","lon")
#
View(dt.pcpn)
install.packages(c("ggplot2","devtools","dplyr","stringer"))
install.packages("mapdata")
install.packages("ggmap")
#Load required packages
library(knitr)
library(data.table)
library(maps)
library(ggplot2)
library(ggmap)
library(mapdata)
knitr::opts_chunk$set(cache=T)
#Load required packages
library(knitr)
library(data.table)
library(maps)
library(ggplot2)
library(ggmap)
library(mapdata)
knitr::opts_chunk$set(cache=T)
#Import Data
#Modularity lesson 2: Think about goals- I can read a new file easily here and won't have to change the code below
Temp<-readRDS(file="./Data/USAAnnualTemp1950_2008.rds")
Pcpn<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize lesson: temp and precip to aviod copy and pasting
#Don't quite know how to use this in my code
#Use modularity lesson 3: Revise code
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("state","name","lat","lon")
#Subset data
#Eliminating na values
na.omit(df.list)
#Eliminate locations w/ fewer than 40 years of data
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize lesson: temp and precip to aviod copy and pasting
#Don't quite know how to use this in my code
#Use modularity lesson 3: Revise code
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("state","name","lat","lon")
#Subset data
#Eliminating na values
na.omit(dt.temp)
#Eliminate locations w/ fewer than 40 years of data
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize lesson: temp and precip to aviod copy and pasting
#Don't quite know how to use this in my code
#Use modularity lesson 3: Revise code
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("state","name","lat","lon")
#Subset data
#Eliminating na values
temp.na<-na.omit(dt.temp)
pcpn.na<-na.omit(dt.pcpn)
#Eliminate locations w/ fewer than 40 years of data
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize lesson: temp and precip to aviod copy and pasting
#Don't quite know how to use this in my code
#Use modularity lesson 3: Revise code
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("state","name","lat","lon")
#Subset data
#Eliminating na values
temp.na<-na.omit(dt.temp)
pcpn.na<-na.omit(dt.pcpn)
#Eliminate locations w/ fewer than 40 years of data
temp.40<-subset(temp.na,ave(state, name =length)>40)
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize lesson: temp and precip to aviod copy and pasting
#Don't quite know how to use this in my code
#Use modularity lesson 3: Revise code
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("state","name","lat","lon")
#Subset data
#Eliminating na values
temp.na<-na.omit(dt.temp)
pcpn.na<-na.omit(dt.pcpn)
#Eliminate locations w/ fewer than 40 years of data
temp.40<-subset(temp.na, table(temp.na$state, temp.na$name)>40)
#Convert data
dt.temp <- data.table(Temp)
dt.pcpn<- data.table(Pcpn)
#Modularize lesson: temp and precip to aviod copy and pasting
#Don't quite know how to use this in my code
#Use modularity lesson 3: Revise code
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("state","name","lat","lon")
#Subset data
#Eliminating na values
temp.na<-na.omit(dt.temp)
pcpn.na<-na.omit(dt.pcpn)
#Eliminate locations w/ fewer than 40 years of data
temp.40<-temp.na[with(temp.na,as.logical(ave(state,name,
FUN = function(x) length(x)>2))),]
#Modularity lessons 4 and 5: I started out by orginizing chunks based on what I knew I had to do- 1) what I would need for input 2) what I would get an an output, 3) type of code I would need to write.
#Modularity lesson 7: by using block headers I was able to come back to the code I wanted to write later and have an idea of the direction I had planned out.
#Load required packages
library(knitr)
library(data.table)
library(maps)
library(ggplot2)
library(ggmap)
library(mapdata)
knitr::opts_chunk$set(cache=T)
#Modularity lesson 2: Think about goals- I can read a replacement file easily here and won't have to change the code below
#Modularity lesson 3: Revised my code on 03/22/2018 because I noticed errors and found better ways to clean the data
#Import Data
dt.temp<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
dt.pcpn<-readRDS(file="./Data/USAAnnualPcpn1950_2016.rds")
#Modularity lesson 8: several commented blocks
#
# #Convert data
# dt.temp <- data.table(Temp)
# dt.pcpn<- data.table(Pcpn)
#List of df
dt.list<-list(dt.temp,dt.pcpn)
#Locating stations
loc<-c("lat","lon")
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
View(ag1.temp)
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count<40,]
View(gt40)
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon","state")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon","state")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
View(dt.temp)
temp.na<-na.omit(dt.temp)
pcpn.na<-na.omit(dt.pcpn)
ag1.temp<-aggregate(temp.na$value, by= temp.na[c("lat","lon")],FUN=mean)
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(temp.na$value, by= temp.na[c("year","lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(temp.na$value, by= temp.na[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
#subset data using aggregate function
#I think there is a way to ommit na values in this step so I can eliminate the previous chunk
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#subset data using aggregate function
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
gt40.spl<-lapply(gt40, function(x) split(x,paste(x$lat,x$lon)))
#subset data using aggregate function
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
gt40.spl<-lapply(gt40, function(x) split(x,paste(gt40$lat,gt40$lon)))
head(gt40.spl)
#Modularity lessons 4 and 5: I started out by orginizing chunks based on what I knew I had to do- 1) what I would need for input 2) what I would get an an output, 3) type of code I would need to write.
#Modularity lesson 7: by using block headers I was able to come back to the code I wanted to write later and have an idea of the direction I had planned out.
#Load required packages
library(knitr)
library(data.table)
library(maps)
library(ggplot2)
library(ggmap)
library(mapdata)
#Packages for subsetting climate data
library(dplyr)
library(stringr)
knitr::opts_chunk$set(cache=T)
#Modularity lesson 2: Think about goals- I can read a replacement file easily here and won't have to change the code below
#Modularity lesson 3: Revised my code on 03/22/2018 because I noticed errors and found better ways to clean the data
#Import Data
temp<-readRDS(file="./Data/USAAnnualTemp1950_2016.rds")
pcpn<-readRDS(file="./Data/USAAnnualPcpn1950_2016.rds")
mean.temp<- group_by((lat, lon) %>%
#subset data using aggregate function
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
mean.temp<- group_by((temp$lat,temp$lon) %>%
#subset data using aggregate function
ag1.temp<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(dt.temp$value, by= dt.temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
mean.temp<- group_by((temp$name) %>%
summarise(mean.temp = mean(temp$value,ma.rm=T)))
mean.temp<- group_by((temp$name) %>% summarise(mean.temp = mean(temp$value,ma.rm=T)))
library(data.table)
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#Modularity lessons 4 and 5: I started out by orginizing chunks based on what I knew I had to do- 1) what I would need for input 2) what I would get an an output, 3) type of code I would need to write.
#Modularity lesson 7: by using block headers I was able to come back to the code I wanted to write later and have an idea of the direction I had planned out.
#Load required packages
library(knitr)
library(data.table)
library(maps)
library(ggplot2)
library(ggmap)
library(mapdata)
#Packages for subsetting climate data
library(dplyr)
library(stringr)
knitr::opts_chunk$set(cache=T)
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
gt40.splt<- group_by(temp,temp$variable) %>%
summarise(mean_temp = mean(temp$value,na.rm = T))
View(gt40.splt)
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#Looked up new approach but this output gives me the same value for each station
gt40.splt<- group_by(temp, variable) %>%
summarise(mean_temp = mean(value,na.rm = T))
View(ag1.temp)
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#Looked up new approach but this output gives me the same value for each station
gt40.splt<- group_by(temp, variable) %>%
summarise(mean_temp = mean(value,na.rm = T))
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-na.omit(ag1.temp)
View(gt40)
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
gt40.na<-na.omit(gt40)
View(gt40.na)
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")])
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
gt40.na<-na.omit(gt40)
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count<40,]
#subset data using aggregate function
ag1.temp<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=mean)
ag1.temp$count<-aggregate(temp$value, by= temp[c("lat","lon")],FUN=length)[,3]
gt40<-ag1.temp[ag1.temp$count>40,]
